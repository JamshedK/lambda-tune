{
  "execTime": "TIMEOUT",
  "config": null,
  "plan": "Limit  (cost=21779.35..21866.81 rows=1 width=64)\n  ->  GroupAggregate  (cost=21779.35..232204.59 rows=2406 width=64)\n        Group Key: EXTRACT(year FROM orders.o_orderdate)\n        ->  Nested Loop  (cost=21779.35..232107.71 rows=2438 width=70)\n              ->  Nested Loop  (cost=21779.21..231724.46 rows=2438 width=20)\n                    ->  Nested Loop  (cost=21778.93..230985.04 rows=2444 width=20)\n                          ->  Nested Loop  (cost=21778.50..137196.49 rows=368579 width=24)\n                                ->  Gather Merge  (cost=21778.07..32507.66 rows=92126 width=8)\n                                      Workers Planned: 2\n                                      ->  Sort  (cost=20778.04..20874.01 rows=38386 width=8)\n                                            Sort Key: (EXTRACT(year FROM orders.o_orderdate))\n                                            ->  Nested Loop  (cost=2.94..17855.28 rows=38386 width=8)\n                                                  ->  Hash Join  (cost=2.51..4571.88 rows=12500 width=4)\n                                                        Hash Cond: (customer.c_nationkey = n1.n_nationkey)\n                                                        ->  Parallel Seq Scan on customer  (cost=0.00..4210.00 rows=62500 width=8)\n                                                        ->  Hash  (cost=2.45..2.45 rows=5 width=4)\n                                                              ->  Hash Join  (cost=1.07..2.45 rows=5 width=4)\n                                                                    Hash Cond: (n1.n_regionkey = region.r_regionkey)\n                                                                    ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)\n                                                                    ->  Hash  (cost=1.06..1.06 rows=1 width=4)\n                                                                          ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)\n                                                                                Filter: (r_name = 'AFRICA'::bpchar)\n                                                  ->  Index Scan using idx_orders_o_custkey_14 on orders  (cost=0.43..1.01 rows=5 width=12)\n                                                        Index Cond: (o_custkey = customer.c_custkey)\n                                                        Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))\n                                ->  Index Scan using idx_lineitem_l_orderkey_22 on lineitem  (cost=0.43..0.99 rows=15 width=24)\n                                      Index Cond: (l_orderkey = orders.o_orderkey)\n                          ->  Memoize  (cost=0.43..0.45 rows=1 width=4)\n                                Cache Key: lineitem.l_partkey\n                                Cache Mode: logical\n                                ->  Index Scan using idx_part_p_partkey_19 on part  (cost=0.42..0.44 rows=1 width=4)\n                                      Index Cond: (p_partkey = lineitem.l_partkey)\n                                      Filter: ((p_type)::text = 'MEDIUM ANODIZED NICKEL'::text)\n                    ->  Index Scan using idx_supplier_s_suppkey_25 on supplier  (cost=0.29..0.30 rows=1 width=8)\n                          Index Cond: (s_suppkey = lineitem.l_suppkey)\n              ->  Index Scan using idx_nation_n_nationkey_18 on nation n2  (cost=0.14..0.16 rows=1 width=30)\n                    Index Cond: (n_nationkey = supplier.s_nationkey)"
}