{
  "execTime": 1260.3864669799805,
  "config": null,
  "plan": "Limit  (cost=50031.83..50050.89 rows=1 width=90)\n  ->  GroupAggregate  (cost=50031.83..1196194.70 rows=60150 width=90)\n        Group Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate))\n        ->  Incremental Sort  (cost=50031.83..1163479.41 rows=1817888 width=81)\n              Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC\n              Presorted Key: nation.n_name\n              ->  Nested Loop  (cost=4679.70..910316.13 rows=1817888 width=81)\n                    ->  Nested Loop  (cost=4679.26..680252.67 rows=1817888 width=53)\n                          Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)\n                          ->  Nested Loop  (cost=4678.82..525704.33 rows=242301 width=48)\n                                ->  Nested Loop  (cost=4678.39..239529.85 rows=3997973 width=44)\n                                      ->  Gather Merge  (cost=4677.96..10376.49 rows=50000 width=30)\n                                            Workers Planned: 1\n                                            ->  Sort  (cost=3677.95..3751.48 rows=29412 width=30)\n                                                  Sort Key: nation.n_name\n                                                  ->  Hash Join  (cost=1.56..1494.97 rows=29412 width=30)\n                                                        Hash Cond: (supplier.s_nationkey = nation.n_nationkey)\n                                                        ->  Parallel Seq Scan on supplier  (cost=0.00..1403.12 rows=29412 width=8)\n                                                        ->  Hash  (cost=1.25..1.25 rows=25 width=30)\n                                                              ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)\n                                      ->  Index Scan using ps_sk on partsupp  (cost=0.43..3.80 rows=78 width=14)\n                                            Index Cond: (ps_suppkey = supplier.s_suppkey)\n                                ->  Memoize  (cost=0.43..0.46 rows=1 width=4)\n                                      Cache Key: partsupp.ps_partkey\n                                      Cache Mode: logical\n                                      ->  Index Scan using p_pk on part  (cost=0.42..0.45 rows=1 width=4)\n                                            Index Cond: (p_partkey = partsupp.ps_partkey)\n                                            Filter: ((p_name)::text ~~ '%ghost%'::text)\n                          ->  Index Scan using l_pk_sk on lineitem  (cost=0.44..0.63 rows=1 width=29)\n                                Index Cond: ((l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))\n                    ->  Memoize  (cost=0.44..0.47 rows=1 width=8)\n                          Cache Key: lineitem.l_orderkey\n                          Cache Mode: logical\n                          ->  Index Scan using o_ok on orders  (cost=0.43..0.46 rows=1 width=8)\n                                Index Cond: (o_orderkey = lineitem.l_orderkey)"
}